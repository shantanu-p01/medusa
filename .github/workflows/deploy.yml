name: Deploy Medusa to AWS ECS
on:
  push:
    branches:
      - master
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-1
        
    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin
      
    - name: Create entrypoint script
      run: |
        cat > entrypoint.sh << 'EOF'
        #!/bin/bash
        set -e

        # Wait for PostgreSQL to be ready
        echo "Waiting for PostgreSQL..."
        until nc -z localhost 5432; do
          echo "PostgreSQL not available yet - sleeping"
          sleep 2
        done
        echo "PostgreSQL is up - executing initialization"

        # Check if app is already initialized
        if [ ! -f "medusa-config.js" ]; then
          echo "Creating new Medusa application..."
          npx create-medusa-app@latest . --skip-db --db-url=$DATABASE_URL
        else
          echo "Medusa application already exists, running migrations..."
          npx medusa migrations run
        fi

        # Seed data if needed (only on first run)
        if [ "$SEED_DATABASE" = "true" ] && [ ! -f ".seed-completed" ]; then
          echo "Seeding database..."
          npx medusa seed --seed-file=./data/seed.json
          touch .seed-completed
        fi

        # Start the Medusa server
        echo "Starting Medusa server..."
        npx medusa start
        EOF
        chmod +x entrypoint.sh
      
    - name: Build and Push Docker Image
      run: |
        docker build -t shantanupatil01/medusa:latest .
        docker push shantanupatil01/medusa:latest
        
    - name: Update ECS Service
      run: |
        aws ecs update-service --cluster medusa-cluster --service medusa-service --force-new-deployment