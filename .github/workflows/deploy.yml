name: Deploy Medusa to AWS ECS
on:
  push:
    branches:
      - master
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-1
        
    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin
      
    - name: Create entrypoint script
      run: |
        cat > entrypoint.sh << 'EOF'
        #!/bin/bash
        set -e
    
        # Wait for PostgreSQL to be ready
        echo "Waiting for PostgreSQL..."
        until nc -z localhost 5432; do
          echo "PostgreSQL not available yet - sleeping"
          sleep 2
        done
        echo "PostgreSQL is up - executing initialization"
    
        # Check if Medusa is already initialized
        if [ ! -f "medusa-config.ts" ]; then
          echo "Creating new Medusa application..."
          # Create a new Medusa project in the current directory with the correct flags
          npx @medusajs/medusa-cli new medusa --skip-db --useDefaults
          
          # Update database configuration manually since we can't pass db-url
          if [ -f "medusa-config.ts" ]; then
            sed -i 's|type: "sqlite"|type: "postgres"|g' medusa-config.ts
            sed -i 's|url: "postgres://localhost/medusa-store"|url: "'"$DATABASE_URL"'"|g' medusa-config.ts
          fi
          
          # Run migrations
          cd medusa ; npx medusa migrations run
        else
          echo "Medusa application already exists, running migrations..."
          cd medusa ; npx medusa migrations run
        fi
    
        # Seed data if needed (only on first run)
        if [ "$SEED_DATABASE" = "true" ] && [ ! -f ".seed-completed" ]; then
          echo "Seeding database with custom data..."
          cd medusa ; npx medusa seed --seed-file=./data/seed.json || echo "Seeding failed, continuing anyway"
          touch .seed-completed
        fi
    
        # Start the Medusa server
        echo "Starting Medusa server..."
        # Use correct host parameter to make it accessible from outside the container
        cd medusa ; npx medusa start --host=0.0.0.0
        EOF
        chmod +x entrypoint.sh
    - name: Build and Push Docker Image
      run: |
        docker build -t shantanupatil01/medusa:latest .
        docker push shantanupatil01/medusa:latest
        
    - name: Update ECS Service
      run: |
        aws ecs update-service --cluster medusa-cluster --service medusa-service --force-new-deployment