name: Deploy Medusa to AWS ECS
on:
  push:
    branches:
      - master
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-1
        
    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin
      
    - name: Create entrypoint script
      run: |
        cat > entrypoint.sh << 'EOF'
        #!/bin/bash
        set -e
    
        # Wait for PostgreSQL to be ready
        echo "Waiting for PostgreSQL..."
        until nc -z localhost 5432; do
          echo "PostgreSQL not available yet - sleeping"
          sleep 2
        done
        echo "PostgreSQL is up - executing initialization"
    
        # Check if Medusa is already initialized
        if [ ! -d "medusa-backend" ]; then
          echo "Creating new Medusa application..."
          # Create a new Medusa project using create-medusa-app with the name medusa-backend
          npx create-medusa-app@latest medusa-backend --skip-db --db-url "$DATABASE_URL" --no-browser
          
          # Run migrations
          cd medusa-backend
          npx medusa migrations run
        else
          echo "Medusa application already exists, running migrations..."
          cd medusa-backend
          npx medusa migrations run
        fi
    
        # Seed data if needed (only on first run)
        if [ "$SEED_DATABASE" = "true" ] && [ ! -f ".seed-completed" ]; then
          echo "Seeding database with custom data..."
          cd medusa-backend
          npx medusa seed --seed-file=../data/seed.json || echo "Seeding failed, continuing anyway"
          cd ..
          touch .seed-completed
        fi
    
        # Start the Medusa server
        echo "Starting Medusa server..."
        # Use correct host parameter to make it accessible from outside the container
        cd medusa-backend
        npx medusa start --host=0.0.0.0
        EOF
        chmod +x entrypoint.sh
        
    - name: Create Dockerfile
      run: |
        cat > Dockerfile << 'EOF'
        FROM node:20

        WORKDIR /app

        # Install required dependencies
        RUN apt-get update && apt-get install -y python3 build-essential netcat-traditional

        # Create a basic package.json to avoid NPM warnings
        RUN echo '{"name":"medusa-app","version":"1.0.0","private":true}' > package.json

        # Set environment variables
        ENV NODE_ENV=production
        ENV PORT=9000
        ENV DATABASE_URL=postgres://medusa:medusa@localhost:5432/medusa
        ENV COOKIE_SECRET=supersecret
        ENV JWT_SECRET=supersecret

        # Create data directory for seed files (optional)
        RUN mkdir -p /app/data
        # Create an empty seed file if none exists
        RUN echo '{"store": {"currencies": ["usd"]}}' > /app/data/seed.json

        # Expose the port the app runs on
        EXPOSE 9000

        # Copy entrypoint script
        COPY entrypoint.sh /entrypoint.sh
        RUN chmod +x /entrypoint.sh

        ENTRYPOINT ["/entrypoint.sh"]
        EOF
        
    - name: Build and Push Docker Image
      run: |
        docker build -t shantanupatil01/medusa:latest .
        docker push shantanupatil01/medusa:latest
        
    - name: Update ECS Service
      run: |
        aws ecs update-service --cluster medusa-cluster --service medusa-service --force-new-deployment